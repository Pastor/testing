basePath: /
definitions:
  main.Event:
    properties:
      created_at:
        type: string
      title:
        description: ID        uint      `json:"id"`
        type: string
    required:
    - title
    type: object
  model.Error:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /events/:
    get:
      consumes:
      - application/json
      description: get all events
      operationId: get-events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Event'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get all events
    post:
      consumes:
      - application/json
      description: create event
      operationId: create-event
      parameters:
      - description: Create event
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/main.Event'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Create event
  /events/{id}:
    get:
      consumes:
      - application/json
      description: get event by ID
      operationId: get-event-by-int
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get event by ID
    put:
      consumes:
      - application/json
      description: modify event
      operationId: modify-event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Modify event
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/main.Event'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Modify event
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
